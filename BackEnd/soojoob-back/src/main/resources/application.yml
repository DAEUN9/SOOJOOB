#server:
#  port: 8080
#  servlet:
#    context-path: /
#    encoding:
#      charset: UTF-8
#      enabled: true
#      force: true

# jdbc:mysql://i7d210.p.ssafy.io:3306/d210?serverTimezone=Asia/Seoul
# jdbc:mysql://localhost:3306/d210?serverTimezone=Asia/Seoul
# 로컬주소
spring:
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://i7d210.p.ssafy.io:3306/d210?serverTimezone=Asia/Seoul
    username: d210
    password: tjrgus777!

  #  mvc:
  #    view:
  #      prefix: /templates/
  #      suffix: .mustache

  jpa:
    hibernate:
      ddl-auto: none #create update none
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    show-sql: true

  security:
    oauth2:
      client:
        registration:
          google: # /oauth2/authorization/google 이 주소를 동작하게 한다.
            client-id: 639304711953-issomobfsg2okv9v8fgm6un4psgffor5.apps.googleusercontent.com
            client-secret: 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
            scope:
              - email
              - profile
#          facebook:
#            client-id: 머시기
#            client-secret: 머시기
#            scope:
#            - email
#            - public_profile
#
#          # 네이버는 OAuth2.0 공식 지원대상이 아니라서 provider 설정이 필요하다.
#          # 요청주소도 다르고, 응답 데이터도 다르기 때문이다.
#          naver:
#            client-id: 머시기
#            client-secret: 머시기
#            scope:
#            - name
#            - email
#            - profile_image
#            client-name: Naver # 클라이언트 네임은 구글 페이스북도 대문자로 시작하더라.
#            authorization-grant-type: authorization_code
#            redirect-uri: http://localhost:8080/login/oauth2/code/naver
#
#        provider:
#          naver:
#            authorization-uri: https://nid.naver.com/oauth2.0/authorize
#            token-uri: https://nid.naver.com/oauth2.0/token
#            user-info-uri: https://openapi.naver.com/v1/nid/me
#            user-name-attribute: response # 회원정보를 json의 response 키값으로 리턴해줌.
